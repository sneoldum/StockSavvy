@page
@model StockSavvy.Pages.StockModel
@{
    ViewData["Title"] = "Home page";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/charts.css/dist/charts.min.css">

<div class="container">
    <div>
        <form asp-page-handler="StockRequest" method="post" class="form-floating">
            <input class="" style="width: 44%;" type="search" placeholder="Type stock code (eg. AMZN)" asp-for="StockCode" />
            <input style="width: 45%;" type="search" placeholder="Enter your Alpha Vantage Api key" asp-for="key" />
            <button style="width: 10%;" class="btn btn-outline-primary">Search</button>
        </form>
        
        @if (Model.dataExJson != null)
        {
            <h1 class="alert alert-danger" role="alert">@Model.dataExJson</h1>
        }
        else if (Model.DataList != null)
        {
            <div>
                <h1 style="display: inline">@Model.DataSymbol</h1>

                @if (((Convert.ToDouble(Model.DataClose.Replace(".", ","))) - (Convert.ToDouble(Model.DataOpen.Replace(".", ",")))) > 0)
                {
                    <h4 style="display: inline; " class="badge rounded-pill bg-success">
                        +%@(System.Math.Round((Convert.ToDouble(Model.DataClose.Replace(".", ",")) / (((Convert.ToDouble(Model.DataOpen.Replace(".", ",")))))*100)-100 ,3)) </h4>
                }
                else if (((Convert.ToDouble(Model.DataClose.Replace(".", ","))) - (Convert.ToDouble(Model.DataOpen.Replace(".", ",")))) == 0)
                {
                    <h4 style="display: inline; color: grey" class="badge rounded-pill bg-secondary">%@(System.Math.Round((Convert.ToDouble(Model.DataClose.Replace(".", ",")) / (((Convert.ToDouble(Model.DataOpen.Replace(".", ","))))) * 100) - 100, 3)) </h4>

                }
                else
                {
                    <h4 style="display: inline; " class="badge rounded-pill bg-danger">-%@(System.Math.Round((Convert.ToDouble(Model.DataClose.Replace(".", ",")) / (((Convert.ToDouble(Model.DataOpen.Replace(".", ","))))) * 100) - 100, 3).ToString().Replace("-",""))</h4>

                }


            </div>
            <div class="row">
                <div class="col-8">
                    <h6>@Model.DataLast</h6>
                    <div id="chart" class="chart"></div>
                </div>
                <div class="col-4">
                    <table class="table">
                        <thead>
                        <tr>
                            <th scope="col">Update date</th>
                            <th scope="col">Open</th>
                            <th scope="col">Close</th>
                            <th scope="col">Volume</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (Model.DataList != null)
                        {
                            int i = 1;
                            @foreach (var data in Model.DataList)
                            {
                                <tr>
                                    <td>@Model.Date[i-1]</td>
                                    <td>@data.Open</td>
                                    <td>@data.Close</td>
                                    <td>@data.Volume</td>
                                </tr>
                                i++;
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script>
        // Set dimensions and margins for the chart
        const margin = { top: 70, right: 30, bottom: 40, left: 80 };
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        // Set up the x and y scales
        const x = d3.scaleTime().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        // Create the SVG element and append it to the chart container
        const svg = d3
            .select("#chart")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Get the data from the server-side
        const dataList = @Json.Serialize(Model.DataList);
        const dateDate = @Json.Serialize(Model.Date);
        console.log(dataList);
        console.log(dateDate);

        // Extract the required properties from each data point
        const parsedData = dataList.map((d, i) => ({
            date: new Date(dateDate[i]),
            value: parseFloat(d["4. close"])
        }));

        // Define the x and y domains
        x.domain(d3.extent(parsedData, (d) => d.date));
        y.domain([d3.min(parsedData, (d) => d.value), d3.max(parsedData, (d) => d.value)]);

        // Add the x-axis
        svg.append("g").attr("transform", `translate(0,${height})`).call(d3.axisBottom(x).ticks(d3.timeHour.every(1)).tickFormat(d3.timeFormat("%I %p")));

        // Add the y-axis
        svg.append("g").call(d3.axisLeft(y));

        // Create the line generator
        const line = d3
            .line()
            .x((d) => x(d.date))
            .y((d) => y(d.value));

        // Create the area generator
        const area = d3
            .area()
            .x((d) => x(d.date))
            .y0(height)
            .y1((d) => y(d.value));

        // Add the area path to the SVG element
        svg
            .append("path")
            .datum(parsedData)
            .attr("fill", d3.color("#2986cc"))
            .attr("d", area);

        // Add the line path to the SVG element
        svg
            .append("path")
            .datum(parsedData)
            .attr("fill", "none")
            .attr("stroke", d3.color("#1e5782"))
            .attr("stroke-width", 1)
            .attr("d", line);

        // Add circles for each data point
        svg
            .selectAll("circle")
            .data(parsedData)
            .enter()
            .append("circle")
            .attr("cx", (d) => x(d.date))
            .attr("cy", (d) => y(d.value))
            .attr("r", 2)
            .attr("fill", d3.color("#1e5782"));
    </script>
}
