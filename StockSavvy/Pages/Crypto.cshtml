@page
@model StockSavvy.Pages.CryptoModel
@{
    ViewData["Title"] = "Crypto";
}
<div style="margin-top: 5%">
    <form asp-page-handler="CryptoRequest" method="post" class="form-floating" style="display: flex">
        <input class="" style="width: 75%;" type="search" placeholder="Type stock code (eg. BTC)"
               asp-for="CryptoCode" id="CryptoInput" />
        <button style="width: 25%; border-radius: 7px;" class="btn btn-primary">Search</button>
    </form>
    <div class="row">
        <div class="col-8" style="margin-top: 3%">
            <canvas id="stockChart" width="400" height="200"></canvas>
        </div>
        <div class="col-4" style="margin-top: 7%">
            <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                <li class="nav-item" role="presentation" style="width: 50%">
                    <button class="btn btn-outline-success active" style="width: 100%" id="pills-home-tab" data-bs-toggle="pill" data-bs-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">Buy</button>
                </li>
                <li class="nav-item" role="presentation" style="width: 50%">
                    <button class="btn btn-outline-danger" style="width: 100%" id="pills-profile-tab" data-bs-toggle="pill" data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile" aria-selected="false">Sell</button>
                </li>
            </ul>
            <div class="tab-content" id="pills-tabContent">
                <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab" tabindex="0">
                    <form asp-page-handler="BuyRequest" method="post" style="margin-top: 20% ;">
                        <input value="@Model.CryptoCode.ToUpper()" style="display: none" asp-for="CryptoCode"></input>
                        <h3>@Model.CryptoCode.ToUpper()</h3>
                        <h5>@Model.Price</h5>
                        <input value="@Model.Price" asp-for="Price" style="display: none"></input>
                        <input type="number" class="form-control" style="margin-bottom: 10%" id="recipient-name" placeholder="Amount buy" asp-for="Amount">
                        <button class="btn btn-success" style="width: 100%">Buy</button>
                    </form>
                </div>
                <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">
                    <form asp-page-handler="SellRequest" method="post" style="margin-top: 20% ;">
                        <input value="@Model.CryptoCode.ToUpper()" asp-for="CryptoCode" style="display: none"></input>
                        <input value="@Model.Price" asp-for="Price" style="display: none"></input>
                        <h3>@Model.CryptoCode.ToUpper()</h3>
                        <h5>@Model.Price</h5>
                        <input type="number" class="form-control" style="margin-bottom: 10%" id="recipient-name" placeholder="Amount sell" asp-for="Amount">
                        <button class="btn btn-danger" style=" width: 100%">Sell</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const CryptoName = document.getElementById('CryptoInput').value.toUpperCase();
        console.log(CryptoName);
        let price = [];
        let time = [];
        async function fetchData() {
            try {
                const response = await fetch("https://api.binance.com/api/v3/klines?symbol=" + CryptoName + "USDT&interval=15m&limit=20");
                const data = await response.json();

                for (var i = 0; i < data.length; i++) {
                    price.push(data[i][4]);
                    time.push(data[i][0]);
                }
                // convert time array unix time to human readable time
                const formattedTime = time.map((timestamp) => {
                    const date = new Date(timestamp);
                    return date.toLocaleString(); // Adjust the formatting as needed
                });
                console.log(formattedTime);
                var ctx = document.getElementById('stockChart').getContext('2d');
                // Clamp the minimum and maximum values
                var minValue = Math.min(...price);
                var maxValue = Math.max(...price);
                console.log(minValue);
                console.log(maxValue);

                // Calculate the range of values
                var valueRange = maxValue - minValue;

                // Adjust the y-axis scale to fit the clamped range
                var suggestedMin = minValue - (valueRange * 0.01); // Adjust the factor (0.1) as needed
                var suggestedMax = maxValue + (valueRange * 0.01); // Adjust the factor (0.1) as needed
                console.log(suggestedMin);
                console.log(suggestedMax);

                // Define the gradient colors based on the last value minus the first value
                var lastValue = price[price.length - 1];
                var firstValue = price[0];

                var gradientColorStart;
                var gradientColorEnd;

                if (lastValue - firstValue > 0) {
                    gradientColorStart = 'rgba(46, 204, 113, 0)'; // Transparent Green
                    gradientColorEnd = 'rgba(46, 204, 113, 1)'; // Green
                    var gradientFill = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height * 2);
                    gradientFill.addColorStop(0, gradientColorEnd);
                    gradientFill.addColorStop(1, gradientColorStart);
                } else {
                    gradientColorStart = 'rgba(255, 50, 50, 0.75)'; // Red
                    gradientColorEnd = 'rgba(255, 50, 50, 0)'; // Transparent Red
                    var gradientFill = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height * 2);
                    gradientFill.addColorStop(0, gradientColorEnd);
                    gradientFill.addColorStop(1, gradientColorStart);
                }

                // Create the chart
                var stockChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: formattedTime,
                        datasets: [{
                            label: CryptoName,
                            data: price,
                            backgroundColor: gradientFill,
                            borderColor: 'rgba(25, 25, 25, 1)',
                            borderWidth: 1.5,
                            fill: true
                        }]
                    },
                    options: {
                        tension: 0.5,
                        responsive: true,
                        scales: {
                            y: {
                                suggestedMin: suggestedMin,
                                suggestedMax: suggestedMax
                            }
                        }
                    },
                    plugins: [{
                        id: 'gradientBg',
                        beforeDraw: (chart, args, options) => {
                            const ctx = chart.canvas.getContext('2d');
                            const chartArea = chart.chartArea;
                            const { top, right, bottom, left, width, height } = chartArea;
                            const gradient = ctx.createLinearGradient(left, bottom, left, top);
                            gradient.addColorStop(0, gradientColorStart);
                            gradient.addColorStop(1, gradientColorEnd);
                            stockChart.data.datasets[0].backgroundColor = gradient;
                        }
                    }]
                });
                function handleResize() {
                    stockChart.resize(); // Resize the chart when the window changes size
                }
                // Add event listener for window resize
                window.addEventListener('resize', handleResize);
            } catch (error) {
                // Handle any errors that occurred during the request
                console.error('Error:', error);
            }
        }
        // Call the async function to fetch data
        fetchData();

        const exampleModal = document.getElementById('exampleModal')
        if (exampleModal) {
            exampleModal.addEventListener('show.bs.modal', event => {
                // Button that triggered the modal
                const button = event.relatedTarget
                // Extract info from data-bs-* attributes
                const recipient = button.getAttribute('data-bs-whatever')
                // If necessary, you could initiate an Ajax request here
                // and then do the updating in a callback.

                // Update the modal's content.
                const modalTitle = exampleModal.querySelector('.modal-title')
                const modalBodyInput = exampleModal.querySelector('.modal-body input')

                modalTitle.textContent = `New message to ${recipient}`
                modalBodyInput.value = recipient
            })
        }




    </script>
    <script>
        const exampleModal = document.getElementById('exampleModal')
        if (exampleModal) {
            exampleModal.addEventListener('show.bs.modal', event => {
                // Button that triggered the modal
                const button = event.relatedTarget
                // Extract info from data-bs-* attributes
                const recipient = button.getAttribute('data-bs-whatever')
                // If necessary, you could initiate an Ajax request here
                // and then do the updating in a callback.

                // Update the modal's content.
                const modalTitle = exampleModal.querySelector('.modal-title')
                const modalBodyInput = exampleModal.querySelector('.modal-body input')

                modalTitle.textContent = `New message to ${recipient}`
                modalBodyInput.value = recipient
            })
        }
    </script>
}